# ASP.NET
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

# Branches that will trigger a build
trigger:
- master

# OS to run on
pool:
  vmImage: 'ubuntu-18.04'

# Variables
variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Leader.Web/wwwroot'
  dotnetSdkVersion: '5.0.200'


steps:

# Write build version to file
- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

# Restore dependancies
- task: DotNetCoreCLI@2
  displayName: 'Restore dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# Compile
- script: dotnet build --configuration $(buildConfiguration) --no-restore
  displayName: 'Build - [$(buildConfiguration)]'

# Automated tests - BEGIN
- task: DotNetCoreCLI@2
  displayName: Unit Tests
  inputs:
    command: 'test'
    projects: '**/Leader.UnitTests.csproj'

- task: DotNetCoreCLI@2
  displayName: Integration Tests
  inputs:
    command: 'test'
    projects: '**/Leader.IntegrationTests.csproj'

- task: DotNetCoreCLI@2
  displayName: Functional Tests
  inputs:
    command: 'test'
    projects: '**/Leader.FunctionalTests.csproj'
# Automated tests - END

# Publish - Start
- task: DotNetCoreCLI@2
  displayName: 'Publish - [$(buildConfiguration)]'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()
# Publish - End